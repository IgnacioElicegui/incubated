{
  "$schema": "http://json-schema.org/schema#",
  "$schemaVersion": "0.0.1",
  "modelTags": "",
  "$id": "https://smart-data-models.github.io/dataModel.Transportation/APDSObservation/schema.json",
  "title": "Smart Data Models - APDSObservation.",
  "description": "This entity models a particular observation of a set of ANPR camera. The Observation might be done with several ANPR camera's, but is limited to the observation of ONE vehicle. It implements the APDS datamodel https://www.allianceforparkingdatastandards.org/",
  "type": "object",
  "derivedFrom": "XXX missing",
  "license": "XXX see original. credit to contributors",
  "allOf": [
    {
      "$ref": "https://smart-data-models.github.io/data-models/common-schema.json#/definitions/GSMA-Commons"
    },
    {
      "$ref": "https://smart-data-models.github.io/data-models/common-schema.json#/definitions/Location-Commons"
    },
    {
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "APDSObservation"
          ],
          "description": "Property. NGSI Entity type. It has to be APDSObservation"
        },
        "observedMethod": {
          "type": "string",
          "description": "The method of observation recorded for this observation element as defined by APDS (ObservationType). Enum:'anpr, chalk, visual, scanner, rfTranspoder, other'",
          "enum": [
            "anpr",
            "other",
            "rfTranspoder",
            "scanner",
            "visual"
          ]
        },
        "observedCredentialType": {
          "type": "string",
          "description": "Type of the credential referenced within  the observation. Allowed values are specified in the APDS CredentialType. Enum: 'barcode, bluetooth, eticket, hangtag, licensePlate, permit, qrCode, rfid, ticket, other'",
          "enum": [
            "barcode",
            "bluetooth",
            "eticket",
            "hangtag",
            "licensePlate",
            "permit",
            "qrCode",
            "rfid",
            "ticket",
            "other"
          ]
        },
        "observedCredentialId": {
          "type": "string",
          "description": "Specific identifier to the referenced observed credential. The credential is specified by observedCredentialType and may be an RFID tag, ticket number from a paystation, license plate number, etc. In case of a licensePlate only alpha numerical values (no spaces or hyphens) are allowed. Optionally an ':' can be used to indicate the position of e.g. the German City Seal (https://www.europeanplates.com/information/german-city-codes.html)."
        },
        "observedCredentialCountry": {
          "type": "string",
          "description": "Country Code following the 2 character ISO3166 standard (https://www.iban.com/country-codes). Note that the International vehicle registration code should not be used to avoid ambiguity (https://en.wikipedia.org/wiki/International_vehicle_registration_code). If the country-code could not be determined, set 'XX' as for this attribute."
        },
        "observedCredentialConfidence": {
          "type": "string",
          "description": "The overal confidence of the measurement. This can be highly vendor specific. Use the metadata to indicate how this number should be interpreted. Arvoo: range[0, 999](higher is better). XXX",
          "enum": [
            "AndereMethodeVanLeverancierXYZ",
            "Arvoo",
            "Scanacar",
            "Genetec",
            "Zoneguard",
            "MACQ - CAM3",
            "MACQ - CAM5"
          ]
        },
        "observedCredentialCharacterConfidence": {
          "type": "array",
          "description": "The confidence of individual character recognition. As with observedCredentialConfidence this is vendor specific. Use the metadata to indicate how the confidences can be interpreted. XXX",
          "items": {
            "type": "string"
          }
        },
        "observer": {
          "type": "string",
          "description": "The name or identification of the scanning system making the observation recorded in this observation element."
        },
        "observerDescription": {
          "type": "string",
          "description": "Free-text description for details of the observation or observer. Can e.g.be used as a friendly name of a specific ANPR scancar."
        },
        "creator": {
          "type": "string",
          "description": "Id of current driver. XXX misleading name?"
        },
        "observerCameras": {
          "type": "array",
          "description": "Array of camera positions that detected the vehicle.The first camera in the list has the best recognition.Use the following abbreviations to indicate the camera positioning on a car: RF(Right Front), RM(Right Middle), RB(Right Back), LF(Left Front), LM(Left Middle), LB(Left Back). XXX missing items",
          "items": {
            "type": "string"
          }
        },
        "observationDateTime": {
          "type": "DateTime",
          "description": "The timestamp the Observation was made (UTC). Mandatory if observationStartDateTime and observationEndDateTime are not used."
        },
        "observationStartDateTime": {
          "type": "DateTime",
          "description": "The date and time of the observation(in UTC)event started.(e.g.a car was observed to enter a delivery zone at 8: 01am). Mandatory if creationDateTime is not used."
        },
        "observationEndDateTime": {
          "type": "DateTime",
          "description": "The date and time of the observation event ended(in UTC).(e.g.a car was observed to exit a delivery zone at 9: 33am).Mandatory if creationDateTime is not used."
        },
        "observerLocation": {
          "$ref": "https://smart-data-models.github.io/data-models/common-schema.json#/definitions/Location-Commons",
          "type": "geo: json",
          "description": "Location of the observer. XXX"
        },
        "observerLocationPDOP": {
          "type": "number",
          "description": "Accuracy of the GPS position of the observer, expressed as 'Position Dilution Of Precision'(https: //en.wikipedia.org/wiki/Dilution_of_precision_(navigation)). Units:'meters'."
        },
        "towardsObserver": {
          "type": "number",
          "description": "1: Observed vehicle moves in direction of camera, 0: Observed vehicle moves away direction of camera, -1: Observed vehicle direction not detected. XXX missing valid values",
          "enum": [
            -1,
            0,
            1
          ]
        },
        "observerHeading": {
          "oneOf": [
            {
              "type": "number",
              "minimum": 0,
              "maximum": 360,
              "exclusiveMaximum": true
            },
            {
              "type": "number",
              "enum": [
                -1
              ]
            }
          ],
          "description": "Property. Denotes the direction of travel of the observer and is specified in decimal degrees, where 0 <= `heading` < 360, counting clockwise relative to the true north. If the vehicle is stationary(i.e. the value of the `speed` attribute is `0`), then the value of the heading attribute must be equal to `-1`. Model: 'https://schema.org/Number'. Units: 'Degree'."
        },
        "observerSpeed": {
          "oneOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "type": "number",
              "minimum": -1,
              "maximum": -1
            }
          ],
          "description": "Property. Denotes the magnitude of the horizontal component of the oberver current velocity and is specified in Kilometers per Hour. If provided, the value of the speed attribute must be a non - negative real number. `-1` MAY be used if speed is transiently unknown for some reason. Model: 'https://schema.org/Number'. Units: 'Km/h' (UN code 'KMH') "
        },
        "observedLocation": {
          "$ref": "https://smart-data-models.github.io/data-models/common-schema.json#/definitions/Location-Commons",
          "type": "geo: json",
          "description": "GPS position of the middle position of the scanned vehicle. XXX better geopoint"
        },
        "observedLocationPDOP": {
          "type": "number",
          "description": "Accuracy of GPS position of the observed vehicle. This is expressed as 'Position Dilution Of Precision'(https: //en.wikipedia.org/wiki/Dilution_of_precision_(navigation)). Units:' meters'. (UN code 'MTR'). "
        },
        "observedHeading": {
          "oneOf": [
            {
              "type": "number",
              "minimum": 0,
              "maximum": 360,
              "exclusiveMaximum": true
            },
            {
              "type": "number",
              "enum": [
                -1
              ]
            }
          ],
          "observerSpeed": {
            "oneOf": [
              {
                "type": "number",
                "minimum": 0
              },
              {
                "type": "number",
                "minimum": -1,
                "maximum": -1
              }
            ],
            "description": "Property.Denotes the magnitude of the horizontal component of the observer current velocity and is specified in kilometers per hour.If provided, the value of the speed attribute must be a non - negative real number.`-1` MAY be used if speed is transiently unknown for some reason.Model: 'https://schema.org/Number'.Units: 'KMH' "
          },
          "description": "Property.Denotes the direction of travel of the observer and is specified in decimal degrees, where 0 <= `heading` < 360, counting clockwise relative to the true north.If the vehicle is stationary(i.e. the value of the `speed` attribute is `0`), then the value of the heading attribute must be equal to `-1`. Model: 'https://schema.org/Number'. Units: Degrees (UN code 'DD') "
        },
        "observedSpeed": {
          "oneOf": [
            {
              "type": "number",
              "minimum": 0
            },
            {
              "type": "number",
              "minimum": -1,
              "maximum": -1
            }
          ],
          "description": "Property. Denotes the magnitude of the horizontal component of the observed vehicles current velocity and is specified in kilometers per hour. If provided, the value of the speed attribute must be a non - negative real number.`-1` MAY be used if speed is transiently unknown for some reason. Model: 'https://schema.org/Number'.Units: km/h (UN Code 'KMH')."
        },
        "images": {
          "type": "array",
          "description": "Property. Array of links to images.The array element contain the URLs of the images and additional info. The latter may contain these tags: URL: url to the image. camId: identifier of the camera. Can be specified by the cameraposition (also used in the ' camera ' attribute. ' imageContent ': specifies the content of the image, ' distance ': the distance from the observer. XXX camelCase missing items",
          "items": {
            "type": "string"
          }
        },
        "observedVehicleColour": {
          "type": "string",
          "description": "The colour of the observed Vehicle"
        },
        "observedVehicleMake": {
          "type": "string",
          "description": "Dhe make of the observed Vehicle"
        },
        "observedVehicleType": {
          "type": "string",
          "description": "Property. Type of vehicle from the point of view of its structural characteristics. This is different than the vehicle category . Model:'https://schema.org/Text'. Enum:'agriculturalVehicle, anyVehicle, articulatedVehicle, bicycle, binTrolley, bus, car, caravan, carOrLightVehicle, carWithCaravan, carWithTrailer, cleaningTrolley, constructionOrMaintenanceVehicle, fourWheelDrive, highSidedVehicle, lorry, minibus, moped, motorcycle, motorcycleWithSideCar, motorscooter, sweepingMachine, tanker, threeWheeledVehicle, trailer, tram, twoWheeledVehicle, trolley, van, vehicleWithoutCatalyticConverter, vehicleWithCaravan, vehicleWithTrailer, withEvenNumberedRegistrationPlates, withOddNumberedRegistrationPlates, other'. The following values defined by _VehicleTypeEnum_ and _VehicleTypeEnum2_, [DATEX 2 version 2.3](http://d2docs.ndwcloud.nu/_static/umlmodel/v2.3/index.htm) and extended for other uses",
          "enum": [
            "agriculturalVehicle",
            "ambulance",
            "anyVehicle",
            "articulatedVehicle",
            "autorickshaw",
            "bicycle",
            "binTrolley",
            "BRT mini busÂ·",
            "BRT bus",
            "bus",
            "car",
            "caravan",
            "carOrLightVehicle",
            "carWithCaravan",
            "carWithTrailer",
            "cleaningTrolley",
            "compactor",
            "constructionOrMaintenanceVehicle",
            "dumper",
            "e-moped",
            "e-scooter",
            "e-motorcycle",
            "fireTender",
            "fourWheelDrive",
            "highSidedVehicle",
            "hopper",
            "lorry",
            "minibus",
            "moped",
            "motorcycle",
            "motorcycleWithSideCar",
            "motorscooter",
            "policeVan",
            "publicMotor",
            "sweepingMachine",
            "tanker",
            "tempo",
            "threeWheeledVehicle",
            "tipper",
            "trailer",
            "tram",
            "trolley",
            "twoWheeledVehicle",
            "van",
            "vehicleWithoutCatalyticConverter",
            "vehicleWithCaravan",
            "vehicleWithTrailer",
            "withEvenNumberedRegistrationPlates",
            "withOddNumberedRegistrationPlates",
            "other"
          ]
        }
      }
    }
  ],
  "required": [
    "id",
    "type"
  ]
}